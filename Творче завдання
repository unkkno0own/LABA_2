Тестове питання 
Що виведе наступна програма на мові C?#include <stdio.h>

int main() {
    int a = 5;
    int b = a++ * 2 + ++a;
    printf("%d\n", b);
    return 0;
}

Варіанти відповідей:
A) 17
B) 16
C) 13
D) Невизначена поведінка

 Правильна відповідь: D) Невизначена поведінка
Пояснення:
Вираз a++ * 2 + ++a використовує змінну a більше одного разу з побічними ефектами (одночасне інкрементування до та після), без послідовності між операціями.
У мові С це порушення правила послідовності змін (sequence points), і згідно зі стандартом, це — невизначена поведінка (undefined behavior).
Якщо навіть компілятор виведе певне значення (наприклад, 17 або 16), це не означає, що програма коректна — вона може працювати по-різному на інших компіляторах або в інших режимах оптимізації.

Чому такі варіанти:
A (17) – те, що виведе деякий компілятор (наприклад, GCC без оптимізації).
B (16) – інший можливий результат при зміні порядку обчислень.
C (13) – ще один можливий результат (фантазія студента).
D (правильна відповідь) – дозволяє розібратися з небезпекою побічних ефектів і UB у виразах.

Завдання з розбором 

Завдання:
Напишіть програму, яка зчитує чотиризначне число і обчислює:
суму його цифр,
добуток його цифр,
перевіряє, чи є число паліндромом (напр., 1221 або 3443).
Поясніть кожен крок та покажіть нюанс: арифметичну обробку цифр через ділення та модуль, роботу з типами.

Розв’язок з поясненням:
#include <stdio.h>

int main() {
    int number;
    printf("Введіть чотиризначне число: ");
    scanf("%d", &number);

    if (number < 1000 || number > 9999) {
        printf("Це не чотиризначне число!\n");
        return 1;
    }

    int d1 = number / 1000;             // перша цифра
    int d2 = (number / 100) % 10;       // друга
    int d3 = (number / 10) % 10;        // третя
    int d4 = number % 10;               // четверта

    int sum = d1 + d2 + d3 + d4;
    int product = d1 * d2 * d3 * d4;

    printf("Сума цифр: %d\n", sum);
    printf("Добуток цифр: %d\n", product);

    if (d1 == d4 && d2 == d3) {
        printf("Це паліндром.\n");
    } else {
        printf("Це не паліндром.\n");
    }

    return 0;
}


Пояснення та нюанси:
Тут важливий нюанс — отримання окремих цифр числа через ділення та модуль:

d1 = number / 1000 — "відтинаємо" всі молодші розряди.
(number / 100) % 10 — отримуємо другу цифру (після поділу на 100 відкидаємо останні дві).
Також:
Використовуються арифметичні оператори % і /, які можуть давати різні результати для від’ємних чисел, але тут ми працюємо тільки з додатними.
Програма демонструє арифметичну обробку чисел без перетворення в рядок, що важливо в мовах типу С.

Цінність завдання:
Тренує роботу з цифрами числа.
Показує як вручну витягати цифри без рядків.
Дає практику перевірки симетрії/паліндромності.
Закріплює використання арифметичних операторів у виразах.



